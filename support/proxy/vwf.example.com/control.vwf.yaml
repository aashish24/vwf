# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

## The component representation of a control behavior
## 
## @name control.vwf
## @namespace

---
properties:
  intermediateValue: 0
  controlValue: 
    set: |
      debugger;
      this.controlValue = value;
      if("animationTime" in this) {
        var positions = this.find( "./element(*,'http://vwf.example.com/control/position.vwf')" );
        for(var i=0; i<positions.length; i++) {
          if(this.controlValue == positions[i].controlValue) {
            this.animationTime = positions[i].animationTime;
          }
        }
      }
      this.controlValueUpdated();
    value: 0
  controlScale: 1
events:
  controlValueUpdated:
scripts:
- |
  this.initialize = function() {
    
    // Locate child nodes that extend or implement "http://vwf.example.com/control/position.vwf"
    // to identify themselves as control key positions.

    var positions = this.find( "./element(*,'http://vwf.example.com/control/position.vwf')" );

    // Fill in missing `controlValue` properties, distributing evenly between the left and right
    // positions that define `controlValue`.

    // 1: [ - ] => [ 0 ]
    // 1: [ 0, - ] => [ 0, 1 ]
    // 1: [ -, 1 ] => [ 0, 1 ]
    // 1: [ 0, -, - ] => [ 0, 1/2, 1 ]
    // 1: [ -, -, 1 ] => [ 0, 1/2, 1 ]
    // 1: [ 0, - , -, 1 ] => [ 0, 1/3 , 2/3, 1 ]

    var leftValue, leftIndex;
    var rightValue, rightIndex = -Infinity;

    if ( positions.length > 0 ) {

      positions.sort(function(a, b) {
        if(!a.controlValue && !b.controlValue) {
          return 0;
        }
        else if(a.controlValue && !b.controlValue) {
          return 1;
        }
        else if(!a.controlValue && b.controlValue) {
          return -1;
        }
        else {
          return a.controlValue - b.controlValue;
        }
      });
      
      if ( positions[0].controlValue === null ) {
        positions[0].controlValue = 0;
      }

      if ( positions[positions.length-1].controlValue === null ) {
        positions[positions.length-1].controlValue = 1;
      }

      positions.forEach( function( position, index ) {

        if ( position.controlValue !== null ) {

          leftValue = position.controlValue;
          leftIndex = index;

        } else {

          if ( index > rightIndex ) {
            for ( rightIndex = index + 1; rightIndex < positions.length; rightIndex++ ) {
              if ( ( rightValue = /* assignment! */ positions[rightIndex].controlValue ) !== null ) {
                break;
              }
            }
          }

          position.controlValue = leftValue + ( rightValue - leftValue ) *
            ( index - leftIndex )  / ( rightIndex - leftIndex );

        }

        this.logger.info( "control position", position.name, position.controlValue );

      }, this );

    }

  } //@ sourceURL=http://vwf.example.com/control.vwf/scripts~initialize
